{"version":3,"sources":["Search.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","className","type","placeholder","id","onClick","click","value","Results","state","statistics","map","stat","src","habilidad","href","target","App","useState","estado","setEstado","consultar","pokemon","a","fetch","response","json","p","name","nombre","idd","abilities","elemento","ability","types","height","weight","stats","base_stat","console","log","message","e","preventDefault","search_input","document","getElementById","toLowerCase","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a2addd0.chunk.js","sourcesContent":["import React from 'react';\nimport './Search.css';\n\nexport default function Search(props){\n    // const\n    return(\n        <form className='search-form'>\n            <input type='search' placeholder='Busca un pokemon' id='search-i'></input>\n            <input type='submit' onClick={props.click} value='Buscar' className='btn-search'></input>\n        </form>\n    );\n}\n","import React from 'react';\nimport './Results.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nexport default function Results(props){\n\n  if (props.state==='loading'){\n\n    return(<div className='Card'> <p>Cargando...</p> </div>)\n  }\n\n  if (props.state){\n    const statistics=props.state[6].map(stat=>stat)\n    return(\n      <div className='Card' id='card'>\n              <img className='poke-img' src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${props.state[1]}.png`}/>\n              <ul className='basicos'>\n                <li className='nombre'><b>Nombre:</b> {props.state[0]}</li>\n                <li className='altura'><b> Altura:</b> {props.state[4]} dm</li>\n                <li className='peso'><b>Peso: </b> {props.state[5]} hg</li>\n              </ul>\n              <div className='habilidades'><b>Habilidades: </b><ul>{props.state[2].map(habilidad=><li>{habilidad}</li>)}</ul></div>\n            <ul className='estadisticas'>\n              <p><b>Estadisticas:</b></p>\n              <li><b>Rapidez: </b> {statistics[0]}</li>\n              <li><b>Defensa especial: </b> {statistics[1]}</li>\n              <li><b>Ataque especial: </b> {statistics[2]}</li>\n              <li><b>Defensa: </b> {statistics[3]}</li>\n              <li><b>Ataque: </b>{statistics[4]}</li>\n              <li><b>Hp: </b> {statistics[5]}</li>\n            </ul>\n            <p>Data extraida de:</p><a href='https://pokeapi.co' target=\"_blank\"> Poke API </a>\n      </div>\n\n      )}\n\n\n  if(props.state===false){\n    return(\n      <div className='Card'>\n        <p>Pokemon no encontrado, ingresa un nombre valido</p>\n      </div>\n    )}\n  if (props.state===null) {\n    return(<div className='Card'>  </div>)\n  }\n\n\n\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport Search from './Search';\nimport Results from './Results';\n\n\nfunction App() {\n\n\n  const [estado,setEstado] = useState(null);\n\n\n\n  const consultar= async (pokemon)=>{\n    try{\n      const response= await fetch(`https://pokeapi.co/api/v2/pokemon/${pokemon}`)\n      const p = await response.json()\n      const nombre= await p.name\n      const idd=await p.id\n      const abilities= await p.abilities.map(elemento=>elemento.ability.name)\n      const types= await p.types.map(elemento=>elemento.type.name)\n      const height= await p.height\n      const weight= await p.weight\n      const stats = await p.stats.map(stat => stat.base_stat)\n      //rapidez,defensa especial,ataque especial,defensa, ataque,hp\n      setEstado([nombre,idd,abilities,types,height,weight,    stats])\n\n    } catch(error){\n      console.log(error.message)\n      setEstado(false)\n\n  }\n  }\n\n  const buscar=(e)=>{\n    e.preventDefault();\n    setEstado('loading');\n    const search_input=document.getElementById('search-i');\n    consultar(search_input.value.toLowerCase());\n    const carta=document.getElementById('card');\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <div className='app-container'>\n        <header className=\"App-header\">\n          <Search click={buscar}/>\n        </header>\n      <div className='results-container'>\n        <Results state={estado}/>\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}